/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "fragment PageInfo on PageInfo {\n  endCursor\n  hasNextPage\n}": types.PageInfoFragmentDoc,
    "fragment Post on Post {\n  id\n  title\n  url\n  author {\n    name\n    profilePicture\n  }\n  coverImage {\n    url\n  }\n  publishedAt\n  slug\n  brief\n  comments(first: 0) {\n    totalDocuments\n  }\n}": types.PostFragmentDoc,
    "fragment Publication on Publication {\n  id\n  title\n  displayTitle\n  url\n  metaTags\n  favicon\n  isTeam\n  followersCount\n  descriptionSEO\n  author {\n    name\n    username\n    profilePicture\n    followersCount\n  }\n  ogMetaData {\n    image\n  }\n  preferences {\n    logo\n    darkMode {\n      logo\n    }\n    navbarItems {\n      id\n      type\n      label\n      url\n    }\n  }\n  links {\n    twitter\n    github\n    linkedin\n    hashnode\n  }\n  integrations {\n    umamiWebsiteUUID\n    gaTrackingID\n    fbPixelID\n    hotjarSiteID\n    matomoURL\n    matomoSiteID\n    fathomSiteID\n    fathomCustomDomain\n    fathomCustomDomainEnabled\n    plausibleAnalyticsEnabled\n  }\n}": types.PublicationFragmentDoc,
    "query DraftById($id: ObjectId!) {\n  draft(id: $id) {\n    id\n    title\n    content {\n      markdown\n    }\n    author {\n      id\n      name\n      username\n    }\n    dateUpdated\n    tags {\n      id\n      name\n      slug\n    }\n  }\n}": types.DraftByIdDocument,
    "query PageByPublication($slug: String!, $host: String!) {\n  publication(host: $host) {\n    ...Publication\n    staticPage(slug: $slug) {\n      ...StaticPage\n    }\n  }\n}\n\nfragment StaticPage on StaticPage {\n  id\n  title\n  slug\n  content {\n    markdown\n  }\n}": types.PageByPublicationDocument,
    "query PostsByPublication($host: String!, $first: Int!, $after: String) {\n  publication(host: $host) {\n    ...Publication\n    posts(first: $first, after: $after) {\n      totalDocuments\n      edges {\n        node {\n          ...Post\n          comments(first: 0) {\n            totalDocuments\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n}\n\nquery MorePostsByPublication($host: String!, $first: Int!, $after: String) {\n  publication(host: $host) {\n    posts(first: $first, after: $after) {\n      edges {\n        node {\n          ...Post\n          comments(first: 0) {\n            totalDocuments\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n}": types.PostsByPublicationDocument,
    "query PublicationByHost($host: String!) {\n  publication(host: $host) {\n    ...Publication\n    posts(first: 0) {\n      totalDocuments\n    }\n  }\n}": types.PublicationByHostDocument,
    "query RSSFeed($host: String!, $first: Int!, $after: String) {\n  publication(host: $host) {\n    ...Publication\n    posts(first: $first, after: $after) {\n      edges {\n        node {\n          id\n          title\n          url\n          slug\n          content {\n            html\n          }\n          tags {\n            id\n            name\n            slug\n          }\n          author {\n            name\n            username\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n}": types.RssFeedDocument,
    "query SinglePostByPublication($slug: String!, $host: String!) {\n  publication(host: $host) {\n    ...Publication\n    post(slug: $slug) {\n      ...PostFull\n    }\n  }\n}\n\nfragment PostFull on Post {\n  id\n  slug\n  url\n  brief\n  title\n  subtitle\n  hasLatexInPost\n  publishedAt\n  updatedAt\n  readTimeInMinutes\n  reactionCount\n  responseCount\n  publication {\n    id\n  }\n  seo {\n    title\n    description\n  }\n  coverImage {\n    url\n  }\n  author {\n    name\n    username\n    profilePicture\n  }\n  title\n  content {\n    markdown\n    html\n  }\n  ogMetaData {\n    image\n  }\n  tags {\n    id\n    name\n    slug\n  }\n  features {\n    tableOfContents {\n      isEnabled\n      items {\n        id\n        level\n        parentId\n        slug\n        title\n      }\n    }\n  }\n  preferences {\n    disableComments\n  }\n  comments(first: 25) {\n    totalDocuments\n    edges {\n      node {\n        id\n        totalReactions\n        content {\n          markdown\n        }\n        author {\n          name\n          username\n          profilePicture\n        }\n      }\n    }\n  }\n}": types.SinglePostByPublicationDocument,
    "query Sitemap($host: String!, $postsCount: Int!, $postsAfter: String, $staticPagesCount: Int!) {\n  publication(host: $host) {\n    id\n    url\n    staticPages(first: $staticPagesCount) {\n      edges {\n        node {\n          slug\n        }\n      }\n    }\n    posts(first: $postsCount, after: $postsAfter) {\n      edges {\n        node {\n          ...RequiredSitemapPostFields\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n}\n\nquery MoreSitemapPosts($host: String!, $postsCount: Int!, $postsAfter: String) {\n  publication(host: $host) {\n    id\n    posts(first: $postsCount, after: $postsAfter) {\n      edges {\n        node {\n          ...RequiredSitemapPostFields\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n}\n\nfragment RequiredSitemapPostFields on Post {\n  id\n  url\n  slug\n  publishedAt\n  updatedAt\n  tags {\n    id\n    name\n    slug\n  }\n}": types.SitemapDocument,
    "query SlugPostsByPublication($host: String!, $first: Int!, $after: String) {\n  publication(host: $host) {\n    ...Publication\n    posts(first: $first, after: $after) {\n      edges {\n        node {\n          slug\n        }\n      }\n    }\n  }\n}": types.SlugPostsByPublicationDocument,
    "query TagPostsByPublication($host: String!, $tagSlug: String!, $first: Int!, $after: String) {\n  publication(host: $host) {\n    ...Publication\n    posts(first: $first, filter: {tagSlugs: [$tagSlug]}, after: $after) {\n      totalDocuments\n      edges {\n        node {\n          ...Post\n        }\n      }\n    }\n  }\n}": types.TagPostsByPublicationDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment PageInfo on PageInfo {\n  endCursor\n  hasNextPage\n}"): (typeof documents)["fragment PageInfo on PageInfo {\n  endCursor\n  hasNextPage\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Post on Post {\n  id\n  title\n  url\n  author {\n    name\n    profilePicture\n  }\n  coverImage {\n    url\n  }\n  publishedAt\n  slug\n  brief\n  comments(first: 0) {\n    totalDocuments\n  }\n}"): (typeof documents)["fragment Post on Post {\n  id\n  title\n  url\n  author {\n    name\n    profilePicture\n  }\n  coverImage {\n    url\n  }\n  publishedAt\n  slug\n  brief\n  comments(first: 0) {\n    totalDocuments\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "fragment Publication on Publication {\n  id\n  title\n  displayTitle\n  url\n  metaTags\n  favicon\n  isTeam\n  followersCount\n  descriptionSEO\n  author {\n    name\n    username\n    profilePicture\n    followersCount\n  }\n  ogMetaData {\n    image\n  }\n  preferences {\n    logo\n    darkMode {\n      logo\n    }\n    navbarItems {\n      id\n      type\n      label\n      url\n    }\n  }\n  links {\n    twitter\n    github\n    linkedin\n    hashnode\n  }\n  integrations {\n    umamiWebsiteUUID\n    gaTrackingID\n    fbPixelID\n    hotjarSiteID\n    matomoURL\n    matomoSiteID\n    fathomSiteID\n    fathomCustomDomain\n    fathomCustomDomainEnabled\n    plausibleAnalyticsEnabled\n  }\n}"): (typeof documents)["fragment Publication on Publication {\n  id\n  title\n  displayTitle\n  url\n  metaTags\n  favicon\n  isTeam\n  followersCount\n  descriptionSEO\n  author {\n    name\n    username\n    profilePicture\n    followersCount\n  }\n  ogMetaData {\n    image\n  }\n  preferences {\n    logo\n    darkMode {\n      logo\n    }\n    navbarItems {\n      id\n      type\n      label\n      url\n    }\n  }\n  links {\n    twitter\n    github\n    linkedin\n    hashnode\n  }\n  integrations {\n    umamiWebsiteUUID\n    gaTrackingID\n    fbPixelID\n    hotjarSiteID\n    matomoURL\n    matomoSiteID\n    fathomSiteID\n    fathomCustomDomain\n    fathomCustomDomainEnabled\n    plausibleAnalyticsEnabled\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query DraftById($id: ObjectId!) {\n  draft(id: $id) {\n    id\n    title\n    content {\n      markdown\n    }\n    author {\n      id\n      name\n      username\n    }\n    dateUpdated\n    tags {\n      id\n      name\n      slug\n    }\n  }\n}"): (typeof documents)["query DraftById($id: ObjectId!) {\n  draft(id: $id) {\n    id\n    title\n    content {\n      markdown\n    }\n    author {\n      id\n      name\n      username\n    }\n    dateUpdated\n    tags {\n      id\n      name\n      slug\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query PageByPublication($slug: String!, $host: String!) {\n  publication(host: $host) {\n    ...Publication\n    staticPage(slug: $slug) {\n      ...StaticPage\n    }\n  }\n}\n\nfragment StaticPage on StaticPage {\n  id\n  title\n  slug\n  content {\n    markdown\n  }\n}"): (typeof documents)["query PageByPublication($slug: String!, $host: String!) {\n  publication(host: $host) {\n    ...Publication\n    staticPage(slug: $slug) {\n      ...StaticPage\n    }\n  }\n}\n\nfragment StaticPage on StaticPage {\n  id\n  title\n  slug\n  content {\n    markdown\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query PostsByPublication($host: String!, $first: Int!, $after: String) {\n  publication(host: $host) {\n    ...Publication\n    posts(first: $first, after: $after) {\n      totalDocuments\n      edges {\n        node {\n          ...Post\n          comments(first: 0) {\n            totalDocuments\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n}\n\nquery MorePostsByPublication($host: String!, $first: Int!, $after: String) {\n  publication(host: $host) {\n    posts(first: $first, after: $after) {\n      edges {\n        node {\n          ...Post\n          comments(first: 0) {\n            totalDocuments\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n}"): (typeof documents)["query PostsByPublication($host: String!, $first: Int!, $after: String) {\n  publication(host: $host) {\n    ...Publication\n    posts(first: $first, after: $after) {\n      totalDocuments\n      edges {\n        node {\n          ...Post\n          comments(first: 0) {\n            totalDocuments\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n}\n\nquery MorePostsByPublication($host: String!, $first: Int!, $after: String) {\n  publication(host: $host) {\n    posts(first: $first, after: $after) {\n      edges {\n        node {\n          ...Post\n          comments(first: 0) {\n            totalDocuments\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query PublicationByHost($host: String!) {\n  publication(host: $host) {\n    ...Publication\n    posts(first: 0) {\n      totalDocuments\n    }\n  }\n}"): (typeof documents)["query PublicationByHost($host: String!) {\n  publication(host: $host) {\n    ...Publication\n    posts(first: 0) {\n      totalDocuments\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query RSSFeed($host: String!, $first: Int!, $after: String) {\n  publication(host: $host) {\n    ...Publication\n    posts(first: $first, after: $after) {\n      edges {\n        node {\n          id\n          title\n          url\n          slug\n          content {\n            html\n          }\n          tags {\n            id\n            name\n            slug\n          }\n          author {\n            name\n            username\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n}"): (typeof documents)["query RSSFeed($host: String!, $first: Int!, $after: String) {\n  publication(host: $host) {\n    ...Publication\n    posts(first: $first, after: $after) {\n      edges {\n        node {\n          id\n          title\n          url\n          slug\n          content {\n            html\n          }\n          tags {\n            id\n            name\n            slug\n          }\n          author {\n            name\n            username\n          }\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query SinglePostByPublication($slug: String!, $host: String!) {\n  publication(host: $host) {\n    ...Publication\n    post(slug: $slug) {\n      ...PostFull\n    }\n  }\n}\n\nfragment PostFull on Post {\n  id\n  slug\n  url\n  brief\n  title\n  subtitle\n  hasLatexInPost\n  publishedAt\n  updatedAt\n  readTimeInMinutes\n  reactionCount\n  responseCount\n  publication {\n    id\n  }\n  seo {\n    title\n    description\n  }\n  coverImage {\n    url\n  }\n  author {\n    name\n    username\n    profilePicture\n  }\n  title\n  content {\n    markdown\n    html\n  }\n  ogMetaData {\n    image\n  }\n  tags {\n    id\n    name\n    slug\n  }\n  features {\n    tableOfContents {\n      isEnabled\n      items {\n        id\n        level\n        parentId\n        slug\n        title\n      }\n    }\n  }\n  preferences {\n    disableComments\n  }\n  comments(first: 25) {\n    totalDocuments\n    edges {\n      node {\n        id\n        totalReactions\n        content {\n          markdown\n        }\n        author {\n          name\n          username\n          profilePicture\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query SinglePostByPublication($slug: String!, $host: String!) {\n  publication(host: $host) {\n    ...Publication\n    post(slug: $slug) {\n      ...PostFull\n    }\n  }\n}\n\nfragment PostFull on Post {\n  id\n  slug\n  url\n  brief\n  title\n  subtitle\n  hasLatexInPost\n  publishedAt\n  updatedAt\n  readTimeInMinutes\n  reactionCount\n  responseCount\n  publication {\n    id\n  }\n  seo {\n    title\n    description\n  }\n  coverImage {\n    url\n  }\n  author {\n    name\n    username\n    profilePicture\n  }\n  title\n  content {\n    markdown\n    html\n  }\n  ogMetaData {\n    image\n  }\n  tags {\n    id\n    name\n    slug\n  }\n  features {\n    tableOfContents {\n      isEnabled\n      items {\n        id\n        level\n        parentId\n        slug\n        title\n      }\n    }\n  }\n  preferences {\n    disableComments\n  }\n  comments(first: 25) {\n    totalDocuments\n    edges {\n      node {\n        id\n        totalReactions\n        content {\n          markdown\n        }\n        author {\n          name\n          username\n          profilePicture\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query Sitemap($host: String!, $postsCount: Int!, $postsAfter: String, $staticPagesCount: Int!) {\n  publication(host: $host) {\n    id\n    url\n    staticPages(first: $staticPagesCount) {\n      edges {\n        node {\n          slug\n        }\n      }\n    }\n    posts(first: $postsCount, after: $postsAfter) {\n      edges {\n        node {\n          ...RequiredSitemapPostFields\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n}\n\nquery MoreSitemapPosts($host: String!, $postsCount: Int!, $postsAfter: String) {\n  publication(host: $host) {\n    id\n    posts(first: $postsCount, after: $postsAfter) {\n      edges {\n        node {\n          ...RequiredSitemapPostFields\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n}\n\nfragment RequiredSitemapPostFields on Post {\n  id\n  url\n  slug\n  publishedAt\n  updatedAt\n  tags {\n    id\n    name\n    slug\n  }\n}"): (typeof documents)["query Sitemap($host: String!, $postsCount: Int!, $postsAfter: String, $staticPagesCount: Int!) {\n  publication(host: $host) {\n    id\n    url\n    staticPages(first: $staticPagesCount) {\n      edges {\n        node {\n          slug\n        }\n      }\n    }\n    posts(first: $postsCount, after: $postsAfter) {\n      edges {\n        node {\n          ...RequiredSitemapPostFields\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n}\n\nquery MoreSitemapPosts($host: String!, $postsCount: Int!, $postsAfter: String) {\n  publication(host: $host) {\n    id\n    posts(first: $postsCount, after: $postsAfter) {\n      edges {\n        node {\n          ...RequiredSitemapPostFields\n        }\n      }\n      pageInfo {\n        ...PageInfo\n      }\n    }\n  }\n}\n\nfragment RequiredSitemapPostFields on Post {\n  id\n  url\n  slug\n  publishedAt\n  updatedAt\n  tags {\n    id\n    name\n    slug\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query SlugPostsByPublication($host: String!, $first: Int!, $after: String) {\n  publication(host: $host) {\n    ...Publication\n    posts(first: $first, after: $after) {\n      edges {\n        node {\n          slug\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query SlugPostsByPublication($host: String!, $first: Int!, $after: String) {\n  publication(host: $host) {\n    ...Publication\n    posts(first: $first, after: $after) {\n      edges {\n        node {\n          slug\n        }\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query TagPostsByPublication($host: String!, $tagSlug: String!, $first: Int!, $after: String) {\n  publication(host: $host) {\n    ...Publication\n    posts(first: $first, filter: {tagSlugs: [$tagSlug]}, after: $after) {\n      totalDocuments\n      edges {\n        node {\n          ...Post\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query TagPostsByPublication($host: String!, $tagSlug: String!, $first: Int!, $after: String) {\n  publication(host: $host) {\n    ...Publication\n    posts(first: $first, filter: {tagSlugs: [$tagSlug]}, after: $after) {\n      totalDocuments\n      edges {\n        node {\n          ...Post\n        }\n      }\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;
